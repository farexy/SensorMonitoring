//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Test.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IModelDto", Namespace="http://schemas.datacontract.org/2004/07/SensorMonitoring.Data.Models")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Test.ServiceReference1.UserDto))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Test.ServiceReference1.SensorDto))]
    public partial class IModelDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserDto", Namespace="http://schemas.datacontract.org/2004/07/SensorMonitoring.Data.Models")]
    [System.SerializableAttribute()]
    public partial class UserDto : Test.ServiceReference1.IModelDto {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FullNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FullName {
            get {
                return this.FullNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FullNameField, value) != true)) {
                    this.FullNameField = value;
                    this.RaisePropertyChanged("FullName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SensorDto", Namespace="http://schemas.datacontract.org/2004/07/SensorMonitoring.Data.Models")]
    [System.SerializableAttribute()]
    public partial class SensorDto : Test.ServiceReference1.IModelDto {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DimensionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LimitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Test.ServiceReference1.UserDto MasterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlaceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubstanceField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Dimension {
            get {
                return this.DimensionField;
            }
            set {
                if ((object.ReferenceEquals(this.DimensionField, value) != true)) {
                    this.DimensionField = value;
                    this.RaisePropertyChanged("Dimension");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Limit {
            get {
                return this.LimitField;
            }
            set {
                if ((this.LimitField.Equals(value) != true)) {
                    this.LimitField = value;
                    this.RaisePropertyChanged("Limit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Test.ServiceReference1.UserDto Master {
            get {
                return this.MasterField;
            }
            set {
                if ((object.ReferenceEquals(this.MasterField, value) != true)) {
                    this.MasterField = value;
                    this.RaisePropertyChanged("Master");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Place {
            get {
                return this.PlaceField;
            }
            set {
                if ((object.ReferenceEquals(this.PlaceField, value) != true)) {
                    this.PlaceField = value;
                    this.RaisePropertyChanged("Place");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Substance {
            get {
                return this.SubstanceField;
            }
            set {
                if ((object.ReferenceEquals(this.SubstanceField, value) != true)) {
                    this.SubstanceField = value;
                    this.RaisePropertyChanged("Substance");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IBLServiceOf_SensorDto")]
    public interface IBLServiceOf_SensorDto {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBLServiceOf_SensorDto/Get", ReplyAction="http://tempuri.org/IBLServiceOf_SensorDto/GetResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Test.ServiceReference1.SensorDto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Test.ServiceReference1.IModelDto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Test.ServiceReference1.UserDto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        Test.ServiceReference1.SensorDto Get(object[] keys);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBLServiceOf_SensorDto/Get", ReplyAction="http://tempuri.org/IBLServiceOf_SensorDto/GetResponse")]
        System.Threading.Tasks.Task<Test.ServiceReference1.SensorDto> GetAsync(object[] keys);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBLServiceOf_SensorDto/Validate", ReplyAction="http://tempuri.org/IBLServiceOf_SensorDto/ValidateResponse")]
        bool Validate(string key, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBLServiceOf_SensorDto/Validate", ReplyAction="http://tempuri.org/IBLServiceOf_SensorDto/ValidateResponse")]
        System.Threading.Tasks.Task<bool> ValidateAsync(string key, string password);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBLServiceOf_SensorDtoChannel : Test.ServiceReference1.IBLServiceOf_SensorDto, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BLServiceOf_SensorDtoClient : System.ServiceModel.ClientBase<Test.ServiceReference1.IBLServiceOf_SensorDto>, Test.ServiceReference1.IBLServiceOf_SensorDto {
        
        public BLServiceOf_SensorDtoClient() {
        }
        
        public BLServiceOf_SensorDtoClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BLServiceOf_SensorDtoClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BLServiceOf_SensorDtoClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BLServiceOf_SensorDtoClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Test.ServiceReference1.SensorDto Get(object[] keys) {
            return base.Channel.Get(keys);
        }
        
        public System.Threading.Tasks.Task<Test.ServiceReference1.SensorDto> GetAsync(object[] keys) {
            return base.Channel.GetAsync(keys);
        }
        
        public bool Validate(string key, string password) {
            return base.Channel.Validate(key, password);
        }
        
        public System.Threading.Tasks.Task<bool> ValidateAsync(string key, string password) {
            return base.Channel.ValidateAsync(key, password);
        }
    }
}
